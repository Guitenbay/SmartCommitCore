package com.github.smartcommit.commitmsg;

public enum AstActionType {
    ANONYMOUS_CLASS_DECLARATION("AnonymousClassDeclaration", 1),
    ARRAY_ACCESS("ArrayAccess", 2),
    ARRAY_CREATION("ArrayCreation", 3),
    ARRAY_INITIALIZER("ArrayInitializer", 4),
    ARRAY_TYPE("ArrayType", 5),
    ASSERT_STATEMENT("AssertStatement", 6),
    ASSIGNMENT("Assignment", 7),
    BLOCK("Block", 8),
    BOOLEAN_LITERAL("BooleanLiteral", 9),
    BREAK_STATEMENT("BreakStatement", 10),
    CAST_EXPRESSION("CastExpression", 11),
    CATCH_CLAUSE("CatchClause", 12),
    CHARACTER_LITERAL("CharacterLiteral", 13),
    CLASS_INSTANCE_CREATION("ClassInstanceCreation", 14),
    COMPILATION_UNIT("CompilationUnit", 15),
    CONDITIONAL_EXPRESSION("ConditionalExpression", 16),
    CONSTRUCTOR_INVOCATION("ConstructorInvocation", 17),
    CONTINUE_STATEMENT("ContinueStatement", 18),
    DO_STATEMENT("DoStatement", 19),
    EMPTY_STATEMENT("EmptyStatement", 20),
    EXPRESSION_STATEMENT("ExpressionStatement", 21),
    FIELD_ACCESS("FieldAccess", 22),
    FIELD_DECLARATION("FieldDeclaration", 23),
    FOR_STATEMENT("ForStatement", 24),
    IF_STATEMENT("IfStatement", 25),
    IMPORT_DECLARATION("ImportDeclaration", 26),
    INFIX_EXPRESSION("InfixExpression", 27),
    INITIALIZER("Initializer", 28),
    JAVADOC("Javadoc", 29),
    LABELED_STATEMENT("LabeledStatement", 30),
    METHOD_DECLARATION("MethodDeclaration", 31),
    METHOD_INVOCATION("MethodInvocation", 32),
    NULL_LITERAL("NullLiteral", 33),
    NUMBER_LITERAL("NumberLiteral", 34),
    PACKAGE_DECLARATION("PackageDeclaration", 35),
    PARENTHESIZED_EXPRESSION("ParenthesizedExpression", 36),
    POSTFIX_EXPRESSION("PostfixExpression", 37),
    PREFIX_EXPRESSION("PrefixExpression", 38),
    PRIMITIVE_TYPE("PrimitiveType", 39),
    QUALIFIED_NAME("QualifiedName", 40),
    RETURN_STATEMENT("ReturnStatement", 41),
    SIMPLE_NAME("SimpleName", 42),
    SIMPLE_TYPE("SimpleType", 43),
    SINGLE_VARIABLE_DECLARATION("SingleVariableDeclaration", 44),
    STRING_LITERAL("StringLiteral", 45),
    SUPER_CONSTRUCTOR_INVOCATION("SuperConstructorInvocation", 46),
    SUPER_FIELD_ACCESS("SuperFieldAccess", 47),
    SUPER_METHOD_INVOCATION("SuperMethodInvocation", 48),
    SWITCH_CASE("SwitchCase", 49),
    SWITCH_STATEMENT("SwitchStatement", 50),
    SYNCHRONIZED_STATEMENT("SynchronizedStatement", 51),
    THIS_EXPRESSION("ThisExpression", 52),
    THROW_STATEMENT("ThrowStatement", 53),
    TRY_STATEMENT("TryStatement", 54),
    TYPE_DECLARATION("TypeDeclaration", 55),
    TYPE_DECLARATION_STATEMENT("TypeDeclarationStatement", 56),
    TYPE_LITERAL("TypeLiteral", 57),
    VARIABLE_DECLARATION_EXPRESSION("VariableDeclarationExpression", 58),
    VARIABLE_DECLARATION_FRAGMENT("VariableDeclarationFragment", 59),
    VARIABLE_DECLARATION_STATEMENT("VariableDeclarationStatement", 60),
    WHILE_STATEMENT("WhileStatement", 61),
    INSTANCE_OF_EXPRESSION("InstanceofExpression", 62),
    LINE_COMMENT("LineComment", 63),
    BLOCK_COMMENT("BlockComment", 64),
    TAG_ELEMENT("TagElement", 65),
    TEXT_ELEMENT("TextElement", 66),
    MEMBER_REF("MemberRef", 67),
    METHOD_REF("MethodRef", 68),
    METHOD_REF_PARAMETER("MethodRefParameter", 69),
    ENHANCED_FO_RSTATEMENT("EnhancedForStatement", 70),
    ENUM_DECLARATION("EnumDeclaration", 71),
    ENUM_CONSTANT_DECLARATION("EnumConstantDeclaration", 72),
    TYPE_PARAMETER("TypeParameter", 73),
    PARAMETERIZED_TYPE("ParameterizedType", 74),
    QUALIFIED_TYPE("QualifiedType", 75),
    WILDCARD_TYPE("WildcardType", 76),
    NORMAL_ANNOTATION("NormalAnnotation", 77),
    MARKER_ANNOTATION("MarkerAnnotation", 78),
    SINGLE_MEMBER_ANNOTATION("SingleMemberAnnotation", 79),
    MEMBER_VALUE_PAIR("MemberValuePair", 80),
    ANNOTATION_TYPE_DECLARATION("AnnotationTypeDeclaration", 81),
    ANNOTATION_TYPE_MEMBER_DECLARATION("AnnotationTypeMemberDeclaration", 82),
    MODIFIER("Modifier", 83),
    UNION_TYPE("UnionType", 84),
    DIMENSION("Dimension", 85),
    LAMBDA_EXPRESSION("LambdaExpression", 86),
    INTERSECTION_TYPE("IntersectionType", 87),
    NAME_QUALIFIED_TYPE("NameQualifiedType", 88),
    CREATION_REFERENCE("CreationReference", 89),
    EXPRESSION_METHOD_REFERENCE("ExpressionMethodReference", 90),
    SUPER_METHOD_REFERENCE("SuperMethodReference", 91),
    TYPE_METHOD_REFERENCE("TypeMethodReference", 92),
    MODULE_DECLARATION("ModuleDeclaration", 93),
    REQUIRES_DIRECTIVE("RequiresDirective", 94),
    EXPORTS_DIRECTIVE("ExportsDirective", 95),
    OPENS_DIRECTIVE("OpensDirective", 96),
    USES_DIRECTIVE("UsesDirective", 97),
    PROVIDES_DIRECTIVE("ProvidesDirective", 98),
    MODULE_MODIFIER("ModuleModifier", 99);

    public String label;
    public int index;

    AstActionType(String label, int index){
        this.label = label;
        this.index = index;
    }

    public int getIndex() {
        return index;
    }
}
